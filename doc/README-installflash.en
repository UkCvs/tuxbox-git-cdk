# Author/Copyright: Barf 2005-07-20, 2005-11-02
# License: Gnu Free Documentation License 
# http://www.gnu.org/licenses/licenses.html#FDL

Prerequisites:
The exact prerequistes are listed in the file INSTALL.en.

Please note: To build a Tuxbox image, some additional tools are
required. Some, but not necessarily all, of these tools are provided
by Linux distributers such as SuSE, Redhat, or Debian. However, the
developers of the Tuxbox do not feel constrained to use only the tools
your favorite Linux distributor distributes. You should therefore
check for the existense (and usability) of the tools individually, and
not assume that your "recent" Linux "must" work (just because it is
"recent"). However, if you have difficulties or questions that are not
answered by FAQs or wiki, feel free to ask the forum.

After you have completed step 3, the command "make toolcheck" can be
used to get a list of the versions of your version of the required tools.

1. Check out the sources. This is described in many places (wiki and
   INSTALL.en). In short, select a place (with lots of
   free diskspace) to keep the sources. We call this $CVSDIR. cd to
   $CVSDIR. Commands are:

export CVS_RSH=ssh
cvs -d anoncvs@cvs.tuxbox.org:/cvs/tuxbox -z3 co -P .

(last command ends with a period, that is part of the command.)

2. Generate some bootstrap files:

cd cdk
./autogen.sh

There may be some warnings on underquoted definitions. These can be
ignored.

3. "Configure" the source tree. Select a place to build the images,
   call it $PREFIX. cd to $CVSDIR/cdk.

Configure with a command like

./configure --prefix=$PREFIX --with-cvsdir=$CVSDIR --enable-flashrules
--with-logosdir=$LOGOSDIR --with-ucodesdir=$UCODESDIR

Examine the output for warnings and errors. Missing fakeroot may me
ok, missing mkcramfs (mksquashfs) is ok if you do not intend to build
cramfs (squashfs)-images. Either mkjffs2 or mkfs.jffs2 is needed for
images, but not both. The warning about mklibs can be ignored. Other
warnings should probably not be ignored.

4. (Optional) Create a directory $LOGOSDIR and put
   bootlogos logo-fb and logo-lcd there. The requirements for these
   are described elsewhere. To make things simple, just "steal"
   them. If they are missing, the image will still boot, but will look
   more mundane. Likewise, if you want ucode to be included directly
   in the image, put them in a directory $UCODESDIR. (Note that images
   containing Betaresearch ucodes may not be legally distributed.)

5a. Build your yadd with a command like make
   yadd-[all,neutrino,enigma,lcars]. 

-and/or-

5b. Build your desired image with a command like "make
   flash-$gui-$filesystem-$chips" where $gui is neutrino or enigma,
   $filesystem is jffs2fs, cramfs, or squashfs, and $chips is 1x or
   2x, depending on the number of flash chips in your dBox. For
   example, "make neutrino-jffs2fs-2x" is my favorite. You can also
   substitute "all" for $gui, $filesystem, or $chips. For example,
   "make neutrino-all-2x" creates three images, all with neutrino, for
   dBoxes with two flashchips, but with three different root file
   system.

6. Wait for the build to finish. On my Athlon XP 1800, make
   flash-all-all-all takes around one and a half hour. 

7a. Set up a server to allow the dBox to boot the just-compiled
   yadd. For Windows, there are GUI tools available, like the
   Flashassistant, described elsewere. Here we consider the case of a
   Unix/Linux server. At a minimum, a DHCP-server, a TFTP-server and
   an NFS-server has to be set up. Some background is given in
   http://wiki.tuxbox.org/CDK_YADD_Boot_Procedure. The make target
   "serversupport" creates a serversupport directory, containing a
   template configuration file for DHCPD, to be appropriately modified
   (changing the box' IP-address and MAC-address should often be
   sufficient), an fragment /etc/exports (to be appended to an
   existing exports file, or used as exports file if none presently
   exists), as well a text file README.tftp, containing tips on how to
   setup tftp. The details are different for different Linux
   distributions (in the name of user friendlyness!).

-and/or-

7b. Assuming that the image build suceeded the just-built image can
   now be flashed as complete image. How to do this is outside the
   scope of the current document. However, the make target
   "dboxflasher" creates a special u-boot (boot file) that can be used
   to flash your image: Just put it in the TFTP-rootdirectory using
   the name flashimage.img.

Customization:

The thus generated image should be directly flashable. The necessary
modifications for the user to get a running system is to upload
u-codes, entering configuration parameters (in particular the network
parameters), and initiating the first channel scan. However, in two
situations it is desirable to customize the image building process:

1. Your images should contain some other "cool" stuff, like plugins. 
2. You are building images for yourself, in which case putting ucodes,
configuration files (like neutrino.conf) and possibly modified channel
lists (services.xml, myservices.xml, bouquets.xml) directly saves
time.

To make this possible (in a clean way), the Makefile calls
user-written modification scripts (if existing and executable) in
certain situations. (Exactle when MAY be described by a future,
extended, version of this document. For now, look for
@TUXBOX_CUSTOMIZE@ and @TUXBOX_YADD_CUSTOMIZE@ in Makefile.am) For
example, to make modifications 
in the root partition of a neutrino-squashfs image, you can write a
script called $CVSROOT/cdk/root-neutrino-squashfs-local.sh, and make
it executable. This script is supposed to make the required
modifications. The scripts are given two arguments, first one ($1 in
the script) is $flashprefix (in the sense of the Makefile) in
@TUXBOX_CUSTOMIZE@, and $targetprefix in @TUXBOX_YADD_CUSTOMIZE@, while the
second argument ($2 in the script) is $buildprefix (in the sense of the
Makefile). For example, here is a sensible var-neutrino-local.sh
script that basically does what 2. above described:

	#!/bin/sh

	flashprefix=$1
	buildprefix=$2
	myfiles=$HOME/dbox/myfiles

	echo Hello, this is $0, flashprefix=$1 and buildprefix=$2
	newvar=$flashprefix/var-neutrino

	set -x
	cp -f $myfiles/var/tuxbox/config/zapit/services.xml $newvar/tuxbox/config/zapit
	cp -f $myfiles/var/tuxbox/config/zapit/bouquets.xml $newvar/tuxbox/config/zapit
	cp -f $myfiles/var/tuxbox/config/zapit/zapit.conf   $newvar/tuxbox/config/zapit
	cp -f $myfiles/var/tuxbox/config/neutrino.conf      $newvar/tuxbox/config

The Makefile(.am) also contains some targets (like
$(flashprefix)/root/bin/ssh) that are not necessarily used by normal
image builds. These can be used either from customization files, or
interactivelly, to install components that would not otherwise be installed.
